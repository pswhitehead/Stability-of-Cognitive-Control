df.simon <- data %>% mutate(prevcon = lag(Congruency)) %>% #creat previous congruency
mutate(acc = lag(StimSlideSimon.ACC)) %>% #create previous accuracy
mutate(RT = (StimSlideSimon.RT)) %>% #create general RT variable
filter(Subject %in% includesubs & StimSlideSimon.RT != "" &
(StimSlideSimon.RT > 200 & StimSlideSimon.RT < 3000) & #liberal filter
StimSlideSimon.ACC == 1 & prevcon != 'NA' & acc == 1 & #accuracy
BlockNum > 2) #experimental only blocks
df.flanker <- data %>% mutate(prevcon = lag(Congruency)) %>%
mutate(acc = lag(StimSlideFlanker.ACC)) %>%
mutate(RT = (StimSlideFlanker.RT)) %>%
filter(Subject %in% includesubs & StimSlideFlanker.RT != "" &
(StimSlideFlanker.RT > 200 & StimSlideFlanker.RT < 3000) &
StimSlideFlanker.ACC == 1 & prevcon != 'NA' & acc == 1 &
BlockNum > 2)
df.stroop <- data %>% mutate(prevcon = lag(Congruency)) %>%
mutate(acc = lag(StimSlideStroop.ACC)) %>%
mutate(RT = (StimSlideStroop.RT)) %>%
filter(Subject %in% includesubs &  StimSlideStroop.RT != "" &
(StimSlideStroop.RT > 200 & StimSlideStroop.RT < 3000) &
StimSlideStroop.ACC == 1 & prevcon != 'NA' & acc == 1 &
BlockNum > 2)
View(df.simon)
View(data)
View(data.raw)
#Loading in the seperate raw datafiles
data.raw<- read_csv("Data/Experiment1.csv")
library(dplyr)
library(extrafont)
library(ggthemes)
library(ggplot2)
library(readr)
library(ggalluvial)
library(data.table)
#Loading in the seperate raw datafiles
data.raw<- fread("Data/Experiment1.csv")
#Make a dataframe of only the necessary variables because these datafiles are yuuuuge
data <- data.raw %>% dplyr::select(Subject, BlockNum, Congruency,
StimSlideSimon.RT, StimSlideFlanker.RT, StimSlideStroop.RT,
StimSlideSimon.ACC, StimSlideFlanker.ACC, StimSlideStroop.ACC)
#subjects to include based on Whitehead et al., (2018)
includesubs <- c(507,508,513,514,517,518,519,520,521,506,515,523,524,525,526,527,528,529,530,532,
533,534,535,537,539,540,541,542,544,545,546,547,548,549,551,553,555,559,560,561,
562,567,568,569,571,573,576,577,578,579,583,584,585,586,587,588,591,592,593,594,
595,596,597,599,601,602,603,605,606,607,608,609,610,611,613,614,615,616,617,619,
620,621,622,623,624,625,626,629,630,631,633,634,635,637,639,640,641,642,643,645,
647,648,649,650,651,652,654,655,656,657,658,659,660,661,662,663,664,665,666,667,
668,669,670,671,672,673,674,675,676,680,678,679,681,683,685,687,689,690,692,693,
694,696,697,698,699,700,701,702,704,705,706,708,710,711,712,713,715,716,718,719,
720,721,723,724,725,726,728,729,730,732,733,734,736,737,738,739,740,741)
data$StimSlideSimon.RT <- as.numeric(as.character(data$StimSlideSimon.RT))
#Filter and clean data
df.simon <- data %>% mutate(prevcon = lag(Congruency)) %>% #creat previous congruency
mutate(acc = lag(StimSlideSimon.ACC)) %>% #create previous accuracy
mutate(RT = (StimSlideSimon.RT)) %>% #create general RT variable
filter(Subject %in% includesubs & StimSlideSimon.RT != "" &
(StimSlideSimon.RT > 200 & StimSlideSimon.RT < 3000) & #liberal filter
StimSlideSimon.ACC == 1 & prevcon != 'NA' & acc == 1 & #accuracy
BlockNum > 2) #experimental only blocks
df.flanker <- data %>% mutate(prevcon = lag(Congruency)) %>%
mutate(acc = lag(StimSlideFlanker.ACC)) %>%
mutate(RT = (StimSlideFlanker.RT)) %>%
filter(Subject %in% includesubs & StimSlideFlanker.RT != "" &
(StimSlideFlanker.RT > 200 & StimSlideFlanker.RT < 3000) &
StimSlideFlanker.ACC == 1 & prevcon != 'NA' & acc == 1 &
BlockNum > 2)
df.stroop <- data %>% mutate(prevcon = lag(Congruency)) %>%
mutate(acc = lag(StimSlideStroop.ACC)) %>%
mutate(RT = (StimSlideStroop.RT)) %>%
filter(Subject %in% includesubs &  StimSlideStroop.RT != "" &
(StimSlideStroop.RT > 200 & StimSlideStroop.RT < 3000) &
StimSlideStroop.ACC == 1 & prevcon != 'NA' & acc == 1 &
BlockNum > 2)
library(dplyr)
library(extrafont)
library(ggthemes)
library(ggplot2)
library(readr)
library(ggalluvial)
library(data.table)
#Loading in the seperate raw datafiles
data.raw<- fread("Data/Experiment1.csv")
#Make a dataframe of only the necessary variables because these datafiles are yuuuuge
data <- data.raw %>% dplyr::select(Subject, BlockNum, Congruency,
StimSlideSimon.RT, StimSlideFlanker.RT, StimSlideStroop.RT,
StimSlideSimon.ACC, StimSlideFlanker.ACC, StimSlideStroop.ACC)
#subjects to include based on Whitehead et al., (2018)
includesubs <- c(507,508,513,514,517,518,519,520,521,506,515,523,524,525,526,527,528,529,530,532,
533,534,535,537,539,540,541,542,544,545,546,547,548,549,551,553,555,559,560,561,
562,567,568,569,571,573,576,577,578,579,583,584,585,586,587,588,591,592,593,594,
595,596,597,599,601,602,603,605,606,607,608,609,610,611,613,614,615,616,617,619,
620,621,622,623,624,625,626,629,630,631,633,634,635,637,639,640,641,642,643,645,
647,648,649,650,651,652,654,655,656,657,658,659,660,661,662,663,664,665,666,667,
668,669,670,671,672,673,674,675,676,680,678,679,681,683,685,687,689,690,692,693,
694,696,697,698,699,700,701,702,704,705,706,708,710,711,712,713,715,716,718,719,
720,721,723,724,725,726,728,729,730,732,733,734,736,737,738,739,740,741)
data$StimSlideSimon.RT <- as.numeric(as.character(data$StimSlideSimon.RT))
#Filter and clean data
df.simon <- data %>% mutate(prevcon = lag(Congruency)) %>% #creat previous congruency
mutate(acc = lag(StimSlideSimon.ACC)) %>% #create previous accuracy
mutate(RT = (StimSlideSimon.RT)) %>% #create general RT variable
filter(Subject %in% includesubs & StimSlideSimon.RT != "" &
(StimSlideSimon.RT > 200 & StimSlideSimon.RT < 3000) & #liberal filter
StimSlideSimon.ACC == 1 & prevcon != 'NA' & acc == 1 & #accuracy
BlockNum > 2) #experimental only blocks
df.flanker <- data %>% mutate(prevcon = lag(Congruency)) %>%
mutate(acc = lag(StimSlideFlanker.ACC)) %>%
mutate(RT = (StimSlideFlanker.RT)) %>%
filter(Subject %in% includesubs & StimSlideFlanker.RT != "" &
(StimSlideFlanker.RT > 200 & StimSlideFlanker.RT < 3000) &
StimSlideFlanker.ACC == 1 & prevcon != 'NA' & acc == 1 &
BlockNum > 2)
df.stroop <- data %>% mutate(prevcon = lag(Congruency)) %>%
mutate(acc = lag(StimSlideStroop.ACC)) %>%
mutate(RT = (StimSlideStroop.RT)) %>%
filter(Subject %in% includesubs &  StimSlideStroop.RT != "" &
(StimSlideStroop.RT > 200 & StimSlideStroop.RT < 3000) &
StimSlideStroop.ACC == 1 & prevcon != 'NA' & acc == 1 &
BlockNum > 2)
#Loading in the seperate raw datafiles
data.raw<- fread("Data/Experiment1.csv")
#Make a dataframe of only the necessary variables because these datafiles are yuuuuge
data <- data.raw %>% dplyr::select(Subject, BlockNum, Congruency,
StimSlideSimon.RT, StimSlideFlanker.RT, StimSlideStroop.RT,
StimSlideSimon.ACC, StimSlideFlanker.ACC, StimSlideStroop.ACC)
#subjects to include based on Whitehead et al., (2018)
includesubs <- c(507,508,513,514,517,518,519,520,521,506,515,523,524,525,526,527,528,529,530,532,
533,534,535,537,539,540,541,542,544,545,546,547,548,549,551,553,555,559,560,561,
562,567,568,569,571,573,576,577,578,579,583,584,585,586,587,588,591,592,593,594,
595,596,597,599,601,602,603,605,606,607,608,609,610,611,613,614,615,616,617,619,
620,621,622,623,624,625,626,629,630,631,633,634,635,637,639,640,641,642,643,645,
647,648,649,650,651,652,654,655,656,657,658,659,660,661,662,663,664,665,666,667,
668,669,670,671,672,673,674,675,676,680,678,679,681,683,685,687,689,690,692,693,
694,696,697,698,699,700,701,702,704,705,706,708,710,711,712,713,715,716,718,719,
720,721,723,724,725,726,728,729,730,732,733,734,736,737,738,739,740,741)
#Filter and clean data
df.simon <- data %>% mutate(prevcon = lag(Congruency)) %>% #creat previous congruency
mutate(acc = lag(StimSlideSimon.ACC)) %>% #create previous accuracy
mutate(RT = (StimSlideSimon.RT)) %>% #create general RT variable
filter(Subject %in% includesubs & StimSlideSimon.RT != "" &
(StimSlideSimon.RT > 200 & StimSlideSimon.RT < 3000) & #liberal filter
StimSlideSimon.ACC == 1 & prevcon != 'NA' & acc == 1 & #accuracy
BlockNum > 2) #experimental only blocks
df.flanker <- data %>% mutate(prevcon = lag(Congruency)) %>%
mutate(acc = lag(StimSlideFlanker.ACC)) %>%
mutate(RT = (StimSlideFlanker.RT)) %>%
filter(Subject %in% includesubs & StimSlideFlanker.RT != "" &
(StimSlideFlanker.RT > 200 & StimSlideFlanker.RT < 3000) &
StimSlideFlanker.ACC == 1 & prevcon != 'NA' & acc == 1 &
BlockNum > 2)
df.stroop <- data %>% mutate(prevcon = lag(Congruency)) %>%
mutate(acc = lag(StimSlideStroop.ACC)) %>%
mutate(RT = (StimSlideStroop.RT)) %>%
filter(Subject %in% includesubs &  StimSlideStroop.RT != "" &
(StimSlideStroop.RT > 200 & StimSlideStroop.RT < 3000) &
StimSlideStroop.ACC == 1 & prevcon != 'NA' & acc == 1 &
BlockNum > 2)
library(dplyr)
library(extrafont)
library(ggthemes)
library(ggplot2)
library(readr)
library(ggalluvial)
library(data.table)
#Loading in the seperate raw datafiles
data.raw<- fread("Data/Experiment1.csv")
#Make a dataframe of only the necessary variables because these datafiles are yuuuuge
data <- data.raw %>% dplyr::select(Subject, BlockNum, Congruency,
StimSlideSimon.RT, StimSlideFlanker.RT, StimSlideStroop.RT,
StimSlideSimon.ACC, StimSlideFlanker.ACC, StimSlideStroop.ACC)
#subjects to include based on Whitehead et al., (2018)
includesubs <- c(507,508,513,514,517,518,519,520,521,506,515,523,524,525,526,527,528,529,530,532,
533,534,535,537,539,540,541,542,544,545,546,547,548,549,551,553,555,559,560,561,
562,567,568,569,571,573,576,577,578,579,583,584,585,586,587,588,591,592,593,594,
595,596,597,599,601,602,603,605,606,607,608,609,610,611,613,614,615,616,617,619,
620,621,622,623,624,625,626,629,630,631,633,634,635,637,639,640,641,642,643,645,
647,648,649,650,651,652,654,655,656,657,658,659,660,661,662,663,664,665,666,667,
668,669,670,671,672,673,674,675,676,680,678,679,681,683,685,687,689,690,692,693,
694,696,697,698,699,700,701,702,704,705,706,708,710,711,712,713,715,716,718,719,
720,721,723,724,725,726,728,729,730,732,733,734,736,737,738,739,740,741)
#Filter and clean data
df.simon <- data %>% mutate(prevcon = lag(Congruency)) %>% #creat previous congruency
mutate(acc = lag(StimSlideSimon.ACC)) %>% #create previous accuracy
mutate(RT = (StimSlideSimon.RT)) %>% #create general RT variable
filter(Subject %in% includesubs & StimSlideSimon.RT != "" &
(StimSlideSimon.RT > 200 & StimSlideSimon.RT < 3000) & #liberal filter
StimSlideSimon.ACC == 1 & prevcon != 'NA' & acc == 1 & #accuracy
BlockNum > 2) #experimental only blocks
df.flanker <- data %>% mutate(prevcon = lag(Congruency)) %>%
mutate(acc = lag(StimSlideFlanker.ACC)) %>%
mutate(RT = (StimSlideFlanker.RT)) %>%
filter(Subject %in% includesubs & StimSlideFlanker.RT != "" &
(StimSlideFlanker.RT > 200 & StimSlideFlanker.RT < 3000) &
StimSlideFlanker.ACC == 1 & prevcon != 'NA' & acc == 1 &
BlockNum > 2)
df.stroop <- data %>% mutate(prevcon = lag(Congruency)) %>%
mutate(acc = lag(StimSlideStroop.ACC)) %>%
mutate(RT = (StimSlideStroop.RT)) %>%
filter(Subject %in% includesubs &  StimSlideStroop.RT != "" &
(StimSlideStroop.RT > 200 & StimSlideStroop.RT < 3000) &
StimSlideStroop.ACC == 1 & prevcon != 'NA' & acc == 1 &
BlockNum > 2)
#Make a dataframe of only the necessary variables because these datafiles are yuuuuge
data <- data.raw %>% dplyr::select(Subject, BlockNum, Congruency,
StimSlideSimon.RT, StimSlideFlanker.RT, StimSlideStroop.RT,
StimSlideSimon.ACC, StimSlideFlanker.ACC, StimSlideStroop.ACC)
#subjects to include based on Whitehead et al., (2018)
includesubs <- c(507,508,513,514,517,518,519,520,521,506,515,523,524,525,526,527,528,529,530,532,
533,534,535,537,539,540,541,542,544,545,546,547,548,549,551,553,555,559,560,561,
562,567,568,569,571,573,576,577,578,579,583,584,585,586,587,588,591,592,593,594,
595,596,597,599,601,602,603,605,606,607,608,609,610,611,613,614,615,616,617,619,
620,621,622,623,624,625,626,629,630,631,633,634,635,637,639,640,641,642,643,645,
647,648,649,650,651,652,654,655,656,657,658,659,660,661,662,663,664,665,666,667,
668,669,670,671,672,673,674,675,676,680,678,679,681,683,685,687,689,690,692,693,
694,696,697,698,699,700,701,702,704,705,706,708,710,711,712,713,715,716,718,719,
720,721,723,724,725,726,728,729,730,732,733,734,736,737,738,739,740,741)
#Filter and clean data
df.simon <- data %>% mutate(prevcon = lag(Congruency)) %>% #creat previous congruency
mutate(acc = lag(StimSlideSimon.ACC)) %>% #create previous accuracy
mutate(RT = (StimSlideSimon.RT)) %>% #create general RT variable
filter(Subject %in% includesubs & StimSlideSimon.RT != "" &
(StimSlideSimon.RT > 200 & StimSlideSimon.RT < 3000) & #liberal filter
StimSlideSimon.ACC == 1 & prevcon != 'NA' & acc == 1 & #accuracy
BlockNum > 2) #experimental only blocks
df.flanker <- data %>% mutate(prevcon = lag(Congruency)) %>%
mutate(acc = lag(StimSlideFlanker.ACC)) %>%
mutate(RT = (StimSlideFlanker.RT)) %>%
filter(Subject %in% includesubs & StimSlideFlanker.RT != "" &
(StimSlideFlanker.RT > 200 & StimSlideFlanker.RT < 3000) &
StimSlideFlanker.ACC == 1 & prevcon != 'NA' & acc == 1 &
BlockNum > 2)
df.stroop <- data %>% mutate(prevcon = lag(Congruency)) %>%
mutate(acc = lag(StimSlideStroop.ACC)) %>%
mutate(RT = (StimSlideStroop.RT)) %>%
filter(Subject %in% includesubs &  StimSlideStroop.RT != "" &
(StimSlideStroop.RT > 200 & StimSlideStroop.RT < 3000) &
StimSlideStroop.ACC == 1 & prevcon != 'NA' & acc == 1 &
BlockNum > 2)
#Loading in the seperate raw datafiles
data.raw.simon<- read_csv("Data/Experiment2_simon.csv")
data.raw.stroop<- read_csv("Data/Experiment2_stroop.csv")
data.raw.flanker<- read_csv("Data/Experiment2_flanker.csv")
#Make a dataframe of only the necessary variables because these datafiles are yuuuuge
data.simon <- data.raw.simon %>%
dplyr::select(Subject, BlockNum, Congruency,
StimSlideSimon.ACC, StimSlideSimon.RT, TargetRepeat)
#Loading in the seperate raw datafiles
data.raw.simon<- read_csv("Data/SimonExp2.csv")
data.raw.stroop<- read_csv("Data/StroopExp2.csv")
data.raw.flanker<- read_csv("Data/FlankerExp2.csv")
#Loading in the seperate raw datafiles
data.raw.simon<- read_csv("SimonExp3.csv")
#Loading in the seperate raw datafiles
data.raw.simon<- read_csv("Data/SimonExp3.csv")
plot.switch <- as.data.frame(cbind(rep(1:3,each=4),rep(1:4,3),
rbind(simon.1,simon.2,simon.3,simon.4,
stroop.1,stroop.2,stroop.3,stroop.4,
flanker.1,flanker.2,flanker.3,flanker.4)))
conf.re <- function(.) {
ranef(., condVar = T)$Subject[['prevcon:Congruency']]
}
conf.int2 <- (bootMer(model.lmer, FUN = conf.re,
re.form=~prevcon*Congruency|Subject,
nsim = 1000, type = "parametric", parallel = "snow", ncpus =3,.progress = "win"))
library(lme4)
conf.re <- function(.) {
ranef(., condVar = T)$Subject[['prevcon:Congruency']]
}
conf.int2 <- (bootMer(model.lmer, FUN = conf.re,
re.form=~prevcon*Congruency|Subject,
nsim = 1000, type = "parametric", parallel = "snow", ncpus =3,.progress = "win"))
library(lme4)
model.lmer <- lme4::lmer(scale(RT) ~ prevcon*Congruency + (1+prevcon*Congruency|Subject), data = df.simon)
summary(model.lmer)
rr1 <- ranef(model.lmer, postVar = T)$Subject
conf.re <- function(.) {
ranef(., condVar = T)$Subject[['prevcon:Congruency']]
}
conf.int2 <- (bootMer(model.lmer, FUN = conf.re,
re.form=~prevcon*Congruency|Subject,
nsim = 1000, type = "parametric", parallel = "snow", ncpus =3,.progress = "win"))
getCI <- function(x,w) {
b1 <- boot.ci(x,type = c("norm"),index=w)
## combine with metadata: CI method, index
tab <- cbind(w,b1$t0,b1$normal[2],b1$normal[3])
colnames(tab) <- c("index","point","lwr","upr")
tab
}
## do it for both parameters
plot.CI <- as.data.frame(do.call(rbind,lapply(1:181,getCI,x=conf.int2)))
library(boot)
library(boot)
getCI <- function(x,w) {
b1 <- boot.ci(x,type = c("norm"),index=w)
## combine with metadata: CI method, index
tab <- cbind(w,b1$t0,b1$normal[2],b1$normal[3])
colnames(tab) <- c("index","point","lwr","upr")
tab
}
## do it for both parameters
plot.CI <- as.data.frame(do.call(rbind,lapply(1:181,getCI,x=conf.int2)))
conf.int2
library(boot)
getCI <- function(x,w) {
b1 <- boot.ci(x,type = c("norm"),index=w)
## combine with metadata: CI method, index
tab <- cbind(w,b1$t0,b1$normal[2],b1$normal[3])
colnames(tab) <- c("index","point","lwr","upr")
tab
}
## do it for both parameters
plot.CI <- as.data.frame(do.call(rbind,lapply(1:178,getCI,x=conf.int2)))
plot.CI <- plot.CI %>% arrange(point) %>% mutate(order = rep(1:178), bestmodel = factor(ifelse((upr < 0 | lwr > 0),1,0)))
library(boot)
library(dplyr)
getCI <- function(x,w) {
b1 <- boot.ci(x,type = c("norm"),index=w)
## combine with metadata: CI method, index
tab <- cbind(w,b1$t0,b1$normal[2],b1$normal[3])
colnames(tab) <- c("index","point","lwr","upr")
tab
}
## do it for both parameters
plot.CI <- as.data.frame(do.call(rbind,lapply(1:178,getCI,x=conf.int2)))
plot.CI <- plot.CI %>% arrange(point) %>% mutate(order = rep(1:178), bestmodel = factor(ifelse((upr < 0 | lwr > 0),1,0)))
ggplot(plot.CI,
aes(x = order, y = point, color = bestmodel)) +
geom_point() +
geom_errorbar(aes(ymin=lwr, ymax=upr), width=.2) +
scale_color_brewer(palette = "Set1")
library(boot)
library(dplyr)
library(ggplot)
library(boot)
library(dplyr)
library(ggplot2)
getCI <- function(x,w) {
b1 <- boot.ci(x,type = c("norm"),index=w)
## combine with metadata: CI method, index
tab <- cbind(w,b1$t0,b1$normal[2],b1$normal[3])
colnames(tab) <- c("index","point","lwr","upr")
tab
}
## do it for both parameters
plot.CI <- as.data.frame(do.call(rbind,lapply(1:178,getCI,x=conf.int2)))
plot.CI <- plot.CI %>% arrange(point) %>% mutate(order = rep(1:178), bestmodel = factor(ifelse((upr < 0 | lwr > 0),1,0)))
ggplot(plot.CI,
aes(x = order, y = point, color = bestmodel)) +
geom_point() +
geom_errorbar(aes(ymin=lwr, ymax=upr), width=.2) +
scale_color_brewer(palette = "Set1")
library(boot)
library(dplyr)
library(ggplot2)
getCI <- function(x,w) {
b1 <- boot.ci(x,type = c("norm"),index=w)
## combine with metadata: CI method, index
tab <- cbind(w,b1$t0,b1$normal[2],b1$normal[3])
colnames(tab) <- c("index","point","lwr","upr")
tab
}
## do it for both parameters
plot.CI <- as.data.frame(do.call(rbind,lapply(1:178,getCI,x=conf.int2)))
plot.CI <- plot.CI %>% arrange(point) %>% mutate(order = rep(1:178), bestmodel = factor(ifelse((upr < 0 | lwr > 0),1,0)))
ggplot(plot.CI,
aes(x = order, y = point, color = bestmodel)) +
geom_point() +
geom_errorbar(aes(ymin=lwr, ymax=upr), width=.2) +
scale_color_brewer(palette = "Set1") +
xlab("Subject") + ylab("Random Effect Estimate") +
theme_classic()
library(boot)
library(dplyr)
library(ggplot2)
getCI <- function(x,w) {
b1 <- boot.ci(x,type = c("norm"),index=w)
## combine with metadata: CI method, index
tab <- cbind(w,b1$t0,b1$normal[2],b1$normal[3])
colnames(tab) <- c("index","point","lwr","upr")
tab
}
## do it for both parameters
plot.CI <- as.data.frame(do.call(rbind,lapply(1:178,getCI,x=conf.int2)))
plot.CI <- plot.CI %>% arrange(point) %>% mutate(order = rep(1:178), bestmodel = factor(ifelse((upr < 0 | lwr > 0),1,0)))
ggplot(plot.CI,
aes(x = order, y = point, color = bestmodel)) +
geom_point() +
geom_errorbar(aes(ymin=lwr, ymax=upr), width=.2) +
scale_color_brewer(palette = "Set1") +
xlab("Subject") + ylab("Random Effect Estimate") +
geom_hline(yintercept=0) +
theme_classic()
library(boot)
library(dplyr)
library(ggplot2)
getCI <- function(x,w) {
b1 <- boot.ci(x,type = c("norm"),index=w)
## combine with metadata: CI method, index
tab <- cbind(w,b1$t0,b1$normal[2],b1$normal[3])
colnames(tab) <- c("index","point","lwr","upr")
tab
}
## do it for both parameters
plot.CI <- as.data.frame(do.call(rbind,lapply(1:178,getCI,x=conf.int2)))
plot.CI <- plot.CI %>% arrange(point) %>% mutate(order = rep(1:178), bestmodel = factor(ifelse((upr < 0 | lwr > 0),1,0)))
ggplot(plot.CI,
aes(x = order, y = point, color = bestmodel)) +
geom_point() +
geom_errorbar(aes(ymin=lwr, ymax=upr), width=.2) +
scale_color_brewer(palette = "Set1") +
xlab("Subject") + ylab("Random Effect Estimate for PrevCon*Con Interaction") +
geom_hline(yintercept=0) +
theme_classic()
source('lib.R')
data.raw <- load.data.exp1()
df.simon <- clean.simon()
df.flanker <- clean.flanker()
df.stroop <- clean.stroop()
library(lme4)
model.simon <- lme4::lmer(scale(RT) ~ prevcon*Congruency + (1+BlockNum*prevcon*Congruency|Subject), data = df.simon)
model.simon <- lme4::lmer(scale(RT) ~ prevcon*Congruency + (1+BlockNum*prevcon*Congruency|Subject), data = df.simon,
control = lmerControl(optCtrl = list(maxfun=50000)))
system.time(model.simon <- lme4::lmer(scale(RT) ~ prevcon*Congruency + (1+BlockNum*prevcon*Congruency|Subject), data = df.simon,
control = lmerControl(optCtrl = list(maxfun=50000))))
model.simon
conf.congruency <- function(.){ranef(., condVar = T)$Subject[["Congruency"]]}
simon.congruency <- (bootMer(model.simon, FUN = conf.congruency,
re.form=~prevcon*Congruency|Subject,
nsim = 10, type = "parametric", parallel = "snow", ncpus = 3))
source('lib.R')
data.raw <- load.data.exp1()
df.simon <- clean.simon()
df.flanker <- clean.flanker()
df.stroop <- clean.stroop()
library(lme4)
model.simon <- lme4::lmer(scale(RT) ~ prevcon*Congruency + (1+prevcon*Congruency|Subject), data = df.simon)
model.stroop <- lme4::lmer(scale(RT) ~ prevcon*Congruency + (1+prevcon*Congruency|Subject), data = df.stroop)
model.flanker <- lme4::lmer(scale(RT) ~ prevcon*Congruency + (1+prevcon*Congruency|Subject), data = df.flanker)
library(arm)
se.ranef(model.simon)
se.ranef(model.simon)$Subject[['prevcon:Congruency']]
se.ranef(model.simon)$Subject
se.ranef(model.simon)$Subject['prevcon:Congruency']
se.ranef(model.simon)$Subject[4]
se.ranef(model.simon)$Subject[,4]
ranef(model.simon)$Subject[["prevcon:Congruency"]]-(2*se.ranef(model.simon)$Subject[,4])
ranef(model.simon)$Subject[["prevcon:Congruency"]]
ranef(model.simon)$Subject[["prevcon:Congruency"]]*c(1,-1)*(2*se.ranef(model.simon)$Subject[,4])
ranef(model.simon)$Subject[[4]]
conf.congruency <- function(.){ranef(., condVar = T)$Subject[[factor]]}
booty <- function(model, fun, factor, sims, cores){
boots <- (bootMer(model, FUN = fun,
re.form=~prevcon*Congruency|Subject,
nsim = sims, type = "parametric", parallel = "snow", ncpus = cores))
return(boots)
}
simon.congruency <- booty(model.simon, conf.congruency, 2, 3, 3)
booty <- function(model, fun, factor, sims, cores){
boots <- (bootMer(model, FUN = fun,
re.form=~prevcon*Congruency|Subject,
nsim = sims, type = "parametric", parallel = "snow", ncpus = cores))
return(boots)
}
booty(model.simon, conf.congruency, 2, 3, 3)
booty <- function(model, fun, factor, sims, cores){
conf.congruency <- function(.){ranef(., condVar = T)$Subject[[factor]]}
boots <- (bootMer(model, FUN = fun,
re.form=~prevcon*Congruency|Subject,
nsim = sims, type = "parametric", parallel = "snow", ncpus = cores))
return(boots)
}
simon.congruency <- booty(model.simon, conf.congruency, 2, 3, 3)
ranef(model.simon, condVar = T)$Subject[[4]]
ranef(model.simon, condVar = T)$Subject[[2]]
booty <- function(model, fun, factor, sims, cores){
factor <- factor
conf.congruency <- function(.){ranef(., condVar = T)$Subject[[factor]]}
boots <- (bootMer(model, FUN = fun,
re.form=~prevcon*Congruency|Subject,
nsim = sims, type = "parametric", parallel = "snow", ncpus = cores))
return(boots)
}
simon.congruency <- booty(model.simon, conf.congruency, 2, 3, 3)
booty <- function(model, fun, factor, sims, cores){
factor <- factor
conf.congruency <- function(.){ranef(., condVar = T)$Subject[[factor]]}
boots <- (bootMer(model, FUN = conf.congruency,
re.form=~prevcon*Congruency|Subject,
nsim = sims, type = "parametric", parallel = "snow", ncpus = cores))
return(boots)
}
simon.congruency <- booty(model.simon, conf.congruency, 2, 3, 3)
ranef(model.simon, condVar = T)$Subject[[4]]
x.test <- ranef(model.simon, condVar = T)$Subject[[4]]
x.test <- as.data.frame(ranef(model.simon, condVar = T)$Subject[[4]])
View(x.test)
x.test <- ranef(model.simon, condVar = T)$Subject[[4]]
ranef(model, condVar = T)$Subject[[factor]]
x.test <- ranef(model.simon, condVar = T)
x.test$Subject
attributes(x.test)
attributes(x.test)$ranef.mer
attributes(x.test)$class
attributes(x.test)[1]
x.test <- ranef(model.simon, condVar = T)
x.test$Subject[4]
str(x.test)
x.test- attr
x.test$Subject[5]
x.test$Subject[4]
str(x.test)
library(lattice)
dotplot(x.test)
