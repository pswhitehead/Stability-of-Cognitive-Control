{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Mixed Model Analysis of Individual Effects\"\noutput: html_notebook\n---\n\n```{r, message=FALSE, warning=FALSE, include=FALSE}\nsource('lib.R')\ndata.raw <- load.data.exp1()\ndf.simon <- clean.simon()\ndf.flanker <- clean.flanker()\ndf.stroop <- clean.stroop()\n```\n\n# Experiment 1\n##Create Linear Mixed Model for each task\n```{r}\nlibrary(lme4)\n\nmodel.simon <- lme4::lmer(scale(RT) ~ prevcon*Congruency + (1+prevcon*Congruency|Subject), data = df.simon)\nmodel.stroop <- lme4::lmer(scale(RT) ~ prevcon*Congruency + (1+prevcon*Congruency|Subject), data = df.stroop)\nmodel.flanker <- lme4::lmer(scale(RT) ~ prevcon*Congruency + (1+prevcon*Congruency|Subject), data = df.flanker)\n\n```\n\n##Get point estimates and 'prediction intervals' for each random effect in model\n```{r}\nRandomeffect.CIs <- function(model, factor){\n  conf.congruency <- \n    cbind(ranef(model, condVar = T)$Subject[[factor]],\n    ranef(model, condVar = T)$Subject[[factor]]+\n      (-1*qnorm(.975)*sqrt(attr(ranef(model, condVar = TRUE)[[1]], \"postVar\")\n                           [factor,factor,])),\n    ranef(model, condVar = T)$Subject[[factor]]+\n      (1*qnorm(.975)*sqrt(attr(ranef(model, condVar = TRUE)[[1]], \"postVar\")\n                          [factor,factor,])))\n                           \n}\n\nsimon.congruency <- as.data.frame(Randomeffect.CIs(model.simon, 2)) %>% \n  arrange(V1) %>% mutate(order = rep(1:178), bestmodel = (ifelse((V3 < 0 | V2 > 0),1,0)))\n\nlibrary(ggplot2)\nggplot(simon.congruency, \n       aes(x = order, y = V1, color = factor(bestmodel))) +\n  geom_point() +\n  geom_errorbar(aes(ymin=V2, ymax=V3), width=.2) +\n  scale_color_brewer(palette = \"Set1\") +\n  xlab(\"Subject\") + ylab(\"Simon Random Effect Estimate for Congruency\") +\n  geom_hline(yintercept=0) +\n  theme_classic()\n\n```\n\n```{r}\n#plot stuff\nggplot(plot.CI.simon.congruency, \n       aes(x = order, y = point, color = bestmodel)) +\n  geom_point() +\n  geom_errorbar(aes(ymin=lwr, ymax=upr), width=.2) +\n  scale_color_brewer(palette = \"Set1\") +\n  xlab(\"Subject\") + ylab(\"Simon Random Effect Estimate for Congruency\") +\n  geom_hline(yintercept=0) +\n  theme_classic()\n\nggplot(plot.CI.flanker.congruency, \n       aes(x = order, y = point, color = bestmodel)) +\n  geom_point() +\n  geom_errorbar(aes(ymin=lwr, ymax=upr), width=.2) +\n  scale_color_brewer(palette = \"Set1\") +\n  xlab(\"Subject\") + ylab(\"Flanker Random Effect Estimate for Congruency\") +\n  geom_hline(yintercept=0) +\n  theme_classic()\n\nggplot(plot.CI.stroop.congruency, \n       aes(x = order, y = point, color = bestmodel)) +\n  geom_point() +\n  geom_errorbar(aes(ymin=lwr, ymax=upr), width=.2) +\n  scale_color_brewer(palette = \"Set1\") +\n  xlab(\"Subject\") + ylab(\"Stroop Random Effect Estimate for Congruency\") +\n  geom_hline(yintercept=0) +\n  theme_classic()\n\nggplot(plot.CI.simon.prevcon, \n       aes(x = order, y = point, color = bestmodel)) +\n  geom_point() +\n  geom_errorbar(aes(ymin=lwr, ymax=upr), width=.2) +\n  scale_color_brewer(palette = \"Set1\") +\n  xlab(\"Subject\") + ylab(\"Simon Random Effect Estimate for PrevCon\") +\n  geom_hline(yintercept=0) +\n  theme_classic()\n\nggplot(plot.CI.flanker.prevcon, \n       aes(x = order, y = point, color = bestmodel)) +\n  geom_point() +\n  geom_errorbar(aes(ymin=lwr, ymax=upr), width=.2) +\n  scale_color_brewer(palette = \"Set1\") +\n  xlab(\"Subject\") + ylab(\"Flanker Random Effect Estimate for PrevCon\") +\n  geom_hline(yintercept=0) +\n  theme_classic()\n\nggplot(plot.CI.stroop.prevcon, \n       aes(x = order, y = point, color = bestmodel)) +\n  geom_point() +\n  geom_errorbar(aes(ymin=lwr, ymax=upr), width=.2) +\n  scale_color_brewer(palette = \"Set1\") +\n  xlab(\"Subject\") + ylab(\"Stroop Random Effect Estimate for PrevCon\") +\n  geom_hline(yintercept=0) +\n  theme_classic()\n\nggplot(plot.CI.simon.int, \n       aes(x = order, y = point, color = bestmodel)) +\n  geom_point() +\n  geom_errorbar(aes(ymin=lwr, ymax=upr), width=.2) +\n  scale_color_brewer(palette = \"Set1\") +\n  xlab(\"Subject\") + ylab(\"Simon Random Effect Estimate for Interaction\") +\n  geom_hline(yintercept=0) +\n  theme_classic()\n\nggplot(plot.CI.flanker.int, \n       aes(x = order, y = point, color = bestmodel)) +\n  geom_point() +\n  geom_errorbar(aes(ymin=lwr, ymax=upr), width=.2) +\n  scale_color_brewer(palette = \"Set1\") +\n  xlab(\"Subject\") + ylab(\"Flanker Random Effect Estimate for Interaction\") +\n  geom_hline(yintercept=0) +\n  theme_classic()\n\nggplot(plot.CI.stroop.int, \n       aes(x = order, y = point, color = bestmodel)) +\n  geom_point() +\n  geom_errorbar(aes(ymin=lwr, ymax=upr), width=.2) +\n  scale_color_brewer(palette = \"Set1\") +\n  xlab(\"Subject\") + ylab(\"Stroop Random Effect Estimate for Interaction\") +\n  geom_hline(yintercept=0) +\n  theme_classic()\n```\n\n",
    "created" : 1550153948635.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3642771417",
    "id" : "9B93E09C",
    "lastKnownWriteTime" : 1550432475,
    "last_content_update" : 1550432475273,
    "path" : "~/GitHub/Stability-of-Cognitive-Control/mixed model analysis.Rmd",
    "project_path" : "mixed model analysis.Rmd",
    "properties" : {
        "chunk_output_type" : "inline",
        "tempName" : "Untitled1"
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}